# NOTE: Service name must match the repository name, but replace all '.' with '-' (this is a restriction of Cloudformation naming conventions)
service: aws-certbot

plugins:
  - serverless-offline
  - serverless-plugin-epsagon

custom:
  securityHash: ${file(./securityhash.txt)}
  appHash: ${file(./apphash.txt)}
  table: ${env:PIPELINE}.${env:STAGE}
  emailMappingTable: ${env:PIPELINE}.nameEmailMapping
  epsagon:
    token: ${opt:epsagonToken}
    appName: ${env:PIPELINE}-${env:STAGE}
  officeSlackCustomFieldId:
    # dev: Xf1LTXNG6P
    master: Xf1LTXNG6P
  cohortSlackCustomFieldId:
    # dev: Xf1M339XQX
    master: Xf1M339XQX

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, env:STAGE}
  environment:
    TABLE: ${self:custom.table}
    MAPPING_TABLE: ${self:custom.emailMappingTable}
    SERVICE_AND_STAGE: ${env:PIPELINE}
    GET_SLACK_PROFILE_SERVICE_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/slack/profile"
    OFFICE_SLACK_CUSTOM_FIELD_ID: ${self:custom.officeSlackCustomFieldId.${self:provider.stage}}
    COHORT_SLACK_CUSTOM_FIELD_ID: ${self:custom.cohortSlackCustomFieldId.${self:provider.stage}}
  # NOTE: Codebuild passes the lambda role from the security stack to the serverless deploy command in the live CI/CD pipeline
  role: ${file(./rolearn.txt)}
  region: ${env:AWS_REGION}
  stackTags:
    Type: service

functions:
  hello:
    environment:
      SLACK_APP_AUTH_TOKEN: ${opt:clientSecret}
      VERIFICATION_TOKEN: ${opt:slackToken}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: functions/index.hello
    events:
      - http:
          path: hello/world
          method: post
          cors: true

  postCert:
    environment:
      VERIFICATION_TOKEN: ${opt:slackToken}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: functions/postCert.handler
    timeout: 30
    events:
      - http:
          path: cert
          method: post
          cors: true

  getData:
    environment:
      SLACK_APP_AUTH_TOKEN: ${opt:clientSecret}
      VERIFICATION_TOKEN: ${opt:slackToken}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: functions/getData.handler
    timeout: 30
    events:
      - http:
          path: awsCertData
          method: post
          cors: true

  postMapping:
    environment:
      VERIFICATION_TOKEN: ${opt:slackToken}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: functions/postMapping.handler
    timeout: 30
    events:
      - http:
          path: mapping
          method: post
          cors: true

  sendReminders:
    environment:
      SLACK_APP_AUTH_TOKEN: ${opt:clientSecret}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
      REMINDER_DAYS: 90
    handler: functions/sendReminders.handler
    timeout: 60
    events:
      - schedule: cron(0 17 * * ? *)

  updateFins:
    environment:
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: functions/updateFins.handler
    timeout: 60
    events:
      - schedule: cron(0 5 * * ? *)

  getSlackProfileService:
    environment:
      SLACK_APP_AUTH_TOKEN: ${opt:clientSecret}
      SLACK_APP_USER_AUTH_TOKEN: ${opt:clientSecret_user}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: functions/getSlackProfileService.handler
    timeout: 30
    events:
      - http:
          path: slack/profile
          method: get
          cors: true

resources:
  Resources:

#    TODO: If needed, add CloudFormation resources
#    EXAMPLE: S3 Bucket 
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:custom.table}'
        AttributeDefinitions:
          - AttributeName: certKey
            AttributeType: S
        KeySchema:
          - AttributeName: certKey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EmailMappingDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:custom.emailMappingTable}'
        AttributeDefinitions:
          - AttributeName: fin
            AttributeType: S
        KeySchema:
          - AttributeName: fin
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  Outputs:

#     TODO: If needed, add Cloudformation Outputs
#     EXAMPLE: Cloudformation Output
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

