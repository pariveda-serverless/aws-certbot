version:  0.1

phases:
  install:
    commands:

      # Install additional npm modules
      - npm install

      # Install jq
      - apt-get update && apt-get install -y jq

      # Epsagon plugin
      - sls plugin install --name serverless-plugin-epsagon

      # Echo sls and node versions
      - echo Node version is $(node -v)
      - echo Serverless Framework version is $(sls -v)
  pre_build:
    commands:
      # Get Configuration Information
      - chmod +x getConfig.sh && ./getConfig.sh

      # Uncomment/modify secret management code below as needed.
      # The commands assume you have uploaded files to the dedicated bucket.
      # For instructions on updating secrets, see https://github.com/pariveda-serverless/support/blob/master/secrets-uploader/README.md
      # To see an example of client-side encryption/decryption, view the commands at https://github.com/pariveda-serverless/child-pipelines/blob/master/buildspec.yml

      # TODO determine if you need secret management, and modify accordingly
      - aws configure set s3.signature_version s3v4
      - echo Secrets bucket is $(cat s3.txt)

      # For environment var SLACK_APP_AUTH_TOKEN in serverless.yml (OAuth Access Token https://api.slack.com/apps/A9ZA995GF/oauth?success=1)
      - aws s3api get-object --bucket $(cat s3.txt) --key oauth.enc oauth.txt
      # For environment var SLACK_APP_USER_AUTH_TOKEN in serverless.yml (OAuth Access Token https://api.slack.com/apps/A9ZA995GF/oauth?success=1)
      - aws s3api get-object --bucket $(cat s3.txt) --key oauth_user.enc oauth_user.txt
      # For environment var VERIFICATION_TOKEN in serverless.yml
      - aws s3api get-object --bucket $(cat s3.txt) --key token.enc token.txt

      # For environment var EPSAGON_TOKEN in serverless.yml
      - aws s3api get-object --bucket $(cat s3.txt) --key epsagon.enc epsagon.txt

      # TODO: If needed, add additional steps
      # EXAMPLE: npm lint, npm test, etc.
  build:
    commands:
      # Deploy Application
      - serverless deploy --clientSecret "$(cat oauth.txt)" --slackToken "$(cat token.txt)" --epsagonToken "$(cat epsagon.txt)" --clientSecret_user "$(cat oauth_user.txt)"

  post_build:
    commands:
      # Remove S3 Bucket Name from Codebuild Memory
      - rm -rf s3.txt
      - rm -rf oauth.txt
      - rm -rf token.txt
      - rm -rf epsagon.txt
      # Remove pipelines
      # USE WITH EXTREME CAUTION!
      #- sls remove
